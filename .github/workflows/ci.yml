name: Continuous Integration
on:
  push:
    branches: ['devpf', 'masterpf', 'issue/*', 'feature/*']
  pull_request:
    branches: ['devpf', 'masterpf', 'issue/*', 'feature/*']

jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: tps_test
          POSTGRES_DB: tps_test
          POSTGRES_PASSWORD: tps_test
        ports: [ "5432:5432" ]

    steps:
      - uses: actions/checkout@v2

      - name: Setup the app code and dependancies
        uses: ./.github/actions/ci-setup-rails

      - name: Run linters
        run: |
          bundle exec rake lint
          bundle exec rake zeitwerk:check

  unit_tests:
    name: Unit tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: tps_test
          POSTGRES_DB: tps_test
          POSTGRES_PASSWORD: tps_test
        ports: ["5432:5432"]

    strategy:
      matrix:
        instances: [0, 1, 2, 3, 4, 5]

    steps:
      - uses: actions/checkout@v2

      - name: Setup the app runtime and dependencies
        uses: ./.github/actions/ci-setup-rails

      - name: Pre-compile assets
        uses: ./.github/actions/ci-setup-assets

      - name: Setup split tests
        uses: ./.github/actions/ci-setup-split-tests
        with:
          results_path: tmp/*.junit.xml

      - name: Run tests
        run: |
          SPEC_FILES=$(./split_tests -glob='spec/**/*_spec.rb' -exclude-glob='spec/system/**' -split-index=${{ strategy.job-index }} -split-total=${{ strategy.job-total }} -junit -junit-path=tmp/*.junit.xml)
          echo "Running tests for bin/rspec $SPEC_FILES"
          bin/rspec $SPEC_FILES --format progress --format RspecJunitFormatter --out tmp/rspec_${{ github.job }}_${{ strategy.job-index }}.junit.xml

      - name: Upload test results for this instance
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: tmp/rspec_${{ github.job }}_${{ strategy.job-index }}.junit.xml

  system_tests:
    name: System tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: tps_test
          POSTGRES_DB: tps_test
          POSTGRES_PASSWORD: tps_test
        ports: ["5432:5432"]

    strategy:
      matrix:
        instances: [0, 1]

    steps:
      - uses: actions/checkout@v2

      - name: Setup the app runtime and dependencies
        uses: ./.github/actions/ci-setup-rails

      - name: Pre-compile assets
        uses: ./.github/actions/ci-setup-assets

      - name: Setup split tests
        uses: ./.github/actions/ci-setup-split-tests
        with:
          results_path: tmp/*.junit.xml

      - name: Run tests
        run: |
          SPEC_FILES=$(./split_tests -glob='spec/system/**/*_spec.rb' -split-index=${{ strategy.job-index }} -split-total=${{ strategy.job-total }} -junit -junit-path=tmp/*.junit.xml)
          echo "Running tests for bin/rspec $SPEC_FILES"
          bin/rspec $SPEC_FILES --format progress --format RspecJunitFormatter --out tmp/rspec_${{ github.job }}_${{ strategy.job-index }}.junit.xml

      - name: Upload test results for this instance
        uses: actions/upload-artifact@v2
        with:
          name: test-reports
          path: tmp/rspec_${{ github.job }}_${{ strategy.job-index }}.junit.xml

  save_test_reports:
    name: Save test reports
    needs: [unit_tests, system_tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Collect test results from all instances
        uses: actions/download-artifact@v2
        with:
          name: test-reports
          path: tmp

      - name: Save test results and timing data, to better split future tests
        uses: ./.github/actions/ci-save-split-tests
        with:
          results_path: tmp/*.junit.xml

  docker:
    runs-on: ubuntu-latest
    needs: [system_tests, unit_tests, linters]
    env:
      repo: "govpf/mes-demarches"
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    -
      name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: ${{ env.repo }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
    -
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
    - name: Update repo description
      uses: peter-evans/dockerhub-description@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: "${{ env.repo }}"

