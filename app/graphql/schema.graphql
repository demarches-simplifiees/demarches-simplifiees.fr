"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type Address {
  """
  code INSEE de la commune
  """
  cityCode: String!

  """
  nom de la commune
  """
  cityName: String!

  """
  n° de département
  """
  departmentCode: String

  """
  nom de département
  """
  departmentName: String

  """
  coordonnées géographique
  """
  geometry: GeoJSON

  """
  libellé complet de l’adresse
  """
  label: String!

  """
  code postal
  """
  postalCode: String!

  """
  n° de region
  """
  regionCode: String

  """
  nom de région
  """
  regionName: String

  """
  numéro éventuel et nom de voie ou lieu dit
  """
  streetAddress: String

  """
  nom de voie ou lieu dit
  """
  streetName: String

  """
  numéro avec indice de répétition éventuel (bis, ter, A, B)
  """
  streetNumber: String

  """
  type de résultat trouvé
  """
  type: AddressType!
}

type AddressChamp implements Champ {
  address: Address

  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  commune: Commune
  departement: Departement
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type AddressChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

enum AddressType {
  """
  numéro « à la plaque »
  """
  housenumber

  """
  lieu-dit
  """
  locality

  """
  numéro « à la commune »
  """
  municipality

  """
  position « à la voie », placé approximativement au centre de celle-ci
  """
  street
}

type AnnuaireEducationChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Association {
  dateCreation: ISO8601Date
  dateDeclaration: ISO8601Date
  datePublication: ISO8601Date
  objet: String
  rna: String!
  titre: String!
}

type Avis {
  attachment: File @deprecated(reason: "Utilisez le champ `attachments` à la place.")
  attachments: [File!]!
  claimant: Profile
  dateQuestion: ISO8601DateTime!
  dateReponse: ISO8601DateTime
  expert: Profile
  id: ID!
  instructeur: Profile! @deprecated(reason: "Utilisez le champ `claimant` à la place.")
  question: String!
  questionAnswer: Boolean
  questionLabel: String
  reponse: String
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type COJOChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type CarteChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  geoAreas: [GeoArea!]!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type CarteChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

interface Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

interface ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type CheckboxChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  value: Boolean!
}

type CheckboxChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type ChorusConfiguration {
  """
  Le code du centre de cout auquel est rattaché la démarche.
  """
  centreDeCout: String

  """
  Le code du domaine fonctionnel auquel est rattaché la démarche.
  """
  domaineFonctionnel: String

  """
  Le code du référentiel de programmation auquel est rattaché la démarche..
  """
  referentielDeProgrammation: String
}

enum Civilite {
  """
  Monsieur
  """
  M

  """
  Madame
  """
  Mme
}

type CiviliteChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  value: Civilite
}

type CiviliteChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type CnafChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Commune {
  """
  Le code INSEE
  """
  code: String!

  """
  Le nom de la commune
  """
  name: String!

  """
  Le code postal
  """
  postalCode: String
}

type CommuneChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  commune: Commune
  departement: Departement
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type CommuneChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

enum ConnectionUsager {
  """
  Compte supprimé
  """
  deleted

  """
  Connexion via FranceConnect
  """
  france_connect

  """
  Connexion via mot de passe
  """
  password
}

"""
GeoJSON coordinates
"""
scalar Coordinates

type Correction {
  dateResolution: ISO8601DateTime
  reason: CorrectionReason!
}

enum CorrectionReason {
  """
  Le dossier est incomplet et nécessite d’être complété
  """
  incomplete

  """
  Le dossier n’est pas valide et nécessite une correction
  """
  incorrect

  """
  Le dossier doit être mis à jour et revalidé
  """
  outdated
}

"""
Autogenerated input type of CreateDirectUpload
"""
input CreateDirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  File content type
  """
  contentType: String!

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Original file name
  """
  filename: String!
}

"""
Autogenerated return type of CreateDirectUpload.
"""
type CreateDirectUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  directUpload: DirectUpload!
}

type DateChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!

  """
  La valeur du champ formaté en ISO8601 (Date).
  """
  date: ISO8601Date
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!

  """
  La valeur du champ formaté en ISO8601 (DateTime).
  """
  value: ISO8601DateTime @deprecated(reason: "Utilisez le champ `date` ou le fragment `DatetimeChamp` à la place.")
}

type DateChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type DatetimeChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!

  """
  La valeur du champ formaté en ISO8601 (DateTime).
  """
  datetime: ISO8601DateTime
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type DatetimeChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type DecimalNumberChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  value: Float
}

type DecimalNumberChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

"""
Un dossier supprimé
"""
type DeletedDossier {
  """
  Date de suppression.
  """
  dateSupression: ISO8601DateTime!
  id: ID!

  """
  Le numéro du dossier qui a été supprimé.
  """
  number: Int!

  """
  La raison de la suppression du dossier.
  """
  reason: String!

  """
  L’état du dossier supprimé.
  """
  state: DossierState!
}

"""
The connection type for DeletedDossier.
"""
type DeletedDossierConnection {
  """
  A list of edges.
  """
  edges: [DeletedDossierEdge]

  """
  A list of nodes.
  """
  nodes: [DeletedDossier]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type DeletedDossierEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: DeletedDossier
}

interface Demandeur {
  id: ID!
}

"""
Une démarche
"""
type Demarche {
  activeRevision: Revision!
  annotationDescriptors: [ChampDescriptor!]! @deprecated(reason: "Utilisez le champ `activeRevision.annotationDescriptors` à la place.")
  champDescriptors: [ChampDescriptor!]! @deprecated(reason: "Utilisez le champ `activeRevision.champDescriptors` à la place.")

  """
  Cadre budgétaire Chorus
  """
  chorusConfiguration: ChorusConfiguration

  """
  Date de la création.
  """
  dateCreation: ISO8601DateTime!

  """
  Date de la dépublication.
  """
  dateDepublication: ISO8601DateTime

  """
  Date de la dernière modification.
  """
  dateDerniereModification: ISO8601DateTime!

  """
  Date de la fermeture.
  """
  dateFermeture: ISO8601DateTime

  """
  Date de la publication.
  """
  datePublication: ISO8601DateTime

  """
  Pour une démarche déclarative, état cible des dossiers à valider automatiquement
  """
  declarative: DossierDeclarativeState

  """
  Liste de tous les dossiers supprimés d’une démarche.
  """
  deletedDossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers supprimés depuis la date.
    """
    deletedSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    L’ordre des dossiers supprimés.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")
  ): DeletedDossierConnection!

  """
  Description de la démarche.
  """
  description: String!

  """
  Liste de tous les dossiers d’une démarche.
  """
  dossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Seulement les dossiers archivés.
    """
    archived: Boolean

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers déposés depuis la date.
    """
    createdSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Seulement les dossiers pour les révisons avant la révision donnée.
    """
    maxRevision: ID

    """
    Seulement les dossiers pour les révisons après la révision donnée.
    """
    minRevision: ID

    """
    L’ordre des dossiers.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")

    """
    Seulement les dossiers pour la révision donnée.
    """
    revision: ID

    """
    Dossiers avec statut.
    """
    state: DossierState

    """
    Dossiers mis à jour depuis la date.
    """
    updatedSince: ISO8601DateTime
  ): DossierConnection!
  draftRevision: Revision!
  groupeInstructeurs(closed: Boolean): [GroupeInstructeur!]!
  id: ID!

  """
  Numero de la démarche.
  """
  number: Int!

  """
  Liste de tous les dossiers en attente de suppression définitive d’une démarche.
  """
  pendingDeletedDossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers en attente de suppression depuis la date.
    """
    deletedSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    L’ordre des dossiers en attente de suppression.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")
  ): DeletedDossierConnection!
  publishedRevision: Revision
  revisions: [Revision!]!
  service: Service

  """
  État de la démarche.
  """
  state: DemarcheState!

  """
  Titre de la démarche.
  """
  title: String!
}

"""
Autogenerated input type of DemarcheCloner
"""
input DemarcheClonerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  La démarche
  """
  demarche: FindDemarcheInput!

  """
  Le titre de la nouvelle démarche.
  """
  title: String
}

"""
Autogenerated return type of DemarcheCloner.
"""
type DemarcheClonerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  demarche: DemarcheDescriptor
  errors: [ValidationError!]
}

"""
Une démarche (métadonnées)
Ceci est une version abrégée du type `Demarche`, qui n’expose que les métadonnées.
Cela évite l’accès récursif aux dossiers.
"""
type DemarcheDescriptor {
  """
  URL du cadre juridique qui justifie le droit de collecter les données demandées dans la démarche
  """
  cadreJuridiqueURL: String
  cadreJuridiqueUrl: String @deprecated(reason: "Utilisez le champ `cadreJuridiqueURL` à la place.")

  """
  Date de la création.
  """
  dateCreation: ISO8601DateTime!

  """
  Date de la dépublication.
  """
  dateDepublication: ISO8601DateTime

  """
  Date de la dernière modification.
  """
  dateDerniereModification: ISO8601DateTime!

  """
  Date de la fermeture.
  """
  dateFermeture: ISO8601DateTime

  """
  Date de la publication.
  """
  datePublication: ISO8601DateTime

  """
  Pour une démarche déclarative, état cible des dossiers à valider automatiquement
  """
  declarative: DossierDeclarativeState

  """
  fichier contenant le cadre juridique
  """
  deliberation: File

  """
  URL pour commencer la démarche
  """
  demarcheURL: URL
  demarcheUrl: URL @deprecated(reason: "Utilisez le champ `demarcheURL` à la place.")

  """
  Description de la démarche.
  """
  description: String!

  """
  URL ou email pour contacter le Délégué à la Protection des Données (DPO)
  """
  dpoURL: String
  dpoUrl: String @deprecated(reason: "Utilisez le champ `dpoURL` à la place.")

  """
  Durée de conservation des dossiers en mois.
  """
  dureeConservationDossiers: Int!
  id: ID!
  logo: File

  """
  notice explicative de la démarche
  """
  notice: File
  noticeURL: URL
  noticeUrl: URL @deprecated(reason: "Utilisez le champ `noticeURL` à la place.")

  """
  Numero de la démarche.
  """
  number: Int!
  opendata: Boolean!
  revision: Revision!
  service: Service

  """
  URL où les usagers trouvent le lien vers la démarche
  """
  siteWebURL: String
  siteWebUrl: String @deprecated(reason: "Utilisez le champ `siteWebURL` à la place.")

  """
  État de la démarche.
  """
  state: DemarcheState!

  """
  mots ou expressions attribués à la démarche pour décrire son contenu et la retrouver
  """
  tags: [String!]!

  """
  Titre de la démarche.
  """
  title: String!

  """
  ministère(s) ou collectivité(s) qui mettent en oeuvre la démarche
  """
  zones: [String!]!
}

enum DemarcheState {
  """
  Brouillon
  """
  brouillon

  """
  Close
  """
  close

  """
  Dépubliée
  """
  depubliee

  """
  Publiée
  """
  publiee
}

type Departement {
  code: String!
  name: String!
}

type DepartementChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  departement: Departement
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type DepartementChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des departements.
  """
  options: [Departement!]

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type DgfipChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record ID
  """
  blobId: ID!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: String!

  """
  Created blob record signed ID
  """
  signedBlobId: ID!

  """
  Upload URL
  """
  url: String!
}

"""
Un dossier
"""
type Dossier {
  annotations(id: ID): [Champ!]!
  archived: Boolean!

  """
  L’URL de l’attestation au format PDF.
  """
  attestation: File
  avis(id: ID): [Avis!]!
  champs(id: ID): [Champ!]!
  connectionUsager: ConnectionUsager!

  """
  Date de dépôt.
  """
  dateDepot: ISO8601DateTime!

  """
  Date de la dernière demande de correction qui n’a pas encore été traitée par l’usager.
  """
  dateDerniereCorrectionEnAttente: ISO8601DateTime

  """
  Date de la dernière modification.
  """
  dateDerniereModification: ISO8601DateTime!

  """
  Date d’expiration.
  """
  dateExpiration: ISO8601DateTime

  """
  Date du dernier passage en construction.
  """
  datePassageEnConstruction: ISO8601DateTime!

  """
  Date du dernier passage en instruction.
  """
  datePassageEnInstruction: ISO8601DateTime

  """
  Date prévisionnelle de décision automatique par le SVA/SVR.
  """
  datePrevisionnelleDecisionSVASVR: ISO8601Date

  """
  Date de la suppression par l’administration.
  """
  dateSuppressionParAdministration: ISO8601DateTime

  """
  Date de la suppression par l’usager.
  """
  dateSuppressionParUsager: ISO8601DateTime

  """
  Date du dernier traitement.
  """
  dateTraitement: ISO8601DateTime

  """
  Date du traitement automatique par le SVA/SVR.
  """
  dateTraitementSVASVR: ISO8601DateTime
  demandeur: Demandeur!
  demarche: DemarcheDescriptor!
  deposeParUnTiers: Boolean

  """
  L’URL du GeoJSON contenant les données cartographiques du dossier.
  """
  geojson: File
  groupeInstructeur: GroupeInstructeur!
  id: ID!
  instructeurs: [Profile!]!
  messages(id: ID): [Message!]!
  motivation: String
  motivationAttachment: File
  nomMandataire: String

  """
  Le numero du dossier.
  """
  number: Int!

  """
  L’URL du dossier au format PDF.
  """
  pdf: File
  prefilled: Boolean!
  prenomMandataire: String
  revision: Revision! @deprecated(reason: "Utilisez le champ `demarche.revision` à la place.")

  """
  L’état du dossier.
  """
  state: DossierState!
  traitements: [Traitement!]!

  """
  Profile de l'usager déposant le dossier
  """
  usager: Profile!
}

"""
Autogenerated input type of DossierAccepter
"""
input DossierAccepterInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
  justificatif: ID
  motivation: String
}

"""
Autogenerated return type of DossierAccepter.
"""
type DossierAccepterPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierArchiver
"""
input DossierArchiverInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
}

"""
Autogenerated return type of DossierArchiver.
"""
type DossierArchiverPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierChangerGroupeInstructeur
"""
input DossierChangerGroupeInstructeurInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Group instructeur a affecter
  """
  groupeInstructeurId: ID!
}

"""
Autogenerated return type of DossierChangerGroupeInstructeur.
"""
type DossierChangerGroupeInstructeurPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierClasserSansSuite
"""
input DossierClasserSansSuiteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
  justificatif: ID
  motivation: String!
}

"""
Autogenerated return type of DossierClasserSansSuite.
"""
type DossierClasserSansSuitePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
The connection type for Dossier.
"""
type DossierConnection {
  """
  A list of edges.
  """
  edges: [DossierEdge]

  """
  A list of nodes.
  """
  nodes: [Dossier]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

enum DossierDeclarativeState {
  """
  Accepté
  """
  accepte

  """
  En instruction
  """
  en_instruction
}

"""
An edge in a connection.
"""
type DossierEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Dossier
}

"""
Autogenerated input type of DossierEnvoyerMessage
"""
input DossierEnvoyerMessageInput {
  attachment: ID
  body: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Préciser qu’il s’agit d’une demande de correction. Le dossier repasssera en construction.
  """
  correction: CorrectionReason
  dossierId: ID!
  instructeurId: ID!
}

"""
Autogenerated return type of DossierEnvoyerMessage.
"""
type DossierEnvoyerMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
  message: Message
}

type DossierLinkChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  dossier: Dossier
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type DossierLinkChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

"""
Autogenerated input type of DossierModifierAnnotationAjouterLigne
"""
input DossierModifierAnnotationAjouterLigneInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
}

"""
Autogenerated return type of DossierModifierAnnotationAjouterLigne.
"""
type DossierModifierAnnotationAjouterLignePayload {
  annotation: RepetitionChamp

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierModifierAnnotationCheckbox
"""
input DossierModifierAnnotationCheckboxInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
  value: Boolean!
}

"""
Autogenerated return type of DossierModifierAnnotationCheckbox.
"""
type DossierModifierAnnotationCheckboxPayload {
  annotation: Champ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierModifierAnnotationDate
"""
input DossierModifierAnnotationDateInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
  value: ISO8601Date!
}

"""
Autogenerated return type of DossierModifierAnnotationDate.
"""
type DossierModifierAnnotationDatePayload {
  annotation: Champ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierModifierAnnotationDatetime
"""
input DossierModifierAnnotationDatetimeInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
  value: ISO8601DateTime!
}

"""
Autogenerated return type of DossierModifierAnnotationDatetime.
"""
type DossierModifierAnnotationDatetimePayload {
  annotation: Champ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierModifierAnnotationIntegerNumber
"""
input DossierModifierAnnotationIntegerNumberInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
  value: Int!
}

"""
Autogenerated return type of DossierModifierAnnotationIntegerNumber.
"""
type DossierModifierAnnotationIntegerNumberPayload {
  annotation: Champ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierModifierAnnotationText
"""
input DossierModifierAnnotationTextInput {
  """
  Annotation ID
  """
  annotationId: ID!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui demande la modification.
  """
  instructeurId: ID!
  value: String!
}

"""
Autogenerated return type of DossierModifierAnnotationText.
"""
type DossierModifierAnnotationTextPayload {
  annotation: Champ

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierPasserEnInstruction
"""
input DossierPasserEnInstructionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
}

"""
Autogenerated return type of DossierPasserEnInstruction.
"""
type DossierPasserEnInstructionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierRefuser
"""
input DossierRefuserInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
  justificatif: ID
  motivation: String!
}

"""
Autogenerated return type of DossierRefuser.
"""
type DossierRefuserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierRepasserEnConstruction
"""
input DossierRepasserEnConstructionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
}

"""
Autogenerated return type of DossierRepasserEnConstruction.
"""
type DossierRepasserEnConstructionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

"""
Autogenerated input type of DossierRepasserEnInstruction
"""
input DossierRepasserEnInstructionInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Désactiver l’envoi de l’email de notification après l’opération
  """
  disableNotification: Boolean = false

  """
  Dossier ID
  """
  dossierId: ID!

  """
  Instructeur qui prend la décision sur le dossier.
  """
  instructeurId: ID!
}

"""
Autogenerated return type of DossierRepasserEnInstruction.
"""
type DossierRepasserEnInstructionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dossier: Dossier
  errors: [ValidationError!]
}

enum DossierState {
  """
  Accepté
  """
  accepte

  """
  En construction
  """
  en_construction

  """
  En instruction
  """
  en_instruction

  """
  Refusé
  """
  refuse

  """
  Classé sans suite
  """
  sans_suite
}

type DropDownListChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des options d’un champ avec selection.
  """
  options: [String!]

  """
  La selection contien l’option "Autre".
  """
  otherOption: Boolean

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Effectif {
  nb: Float!
  periode: String!
}

type EmailChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type EngagementJuridique {
  montantEngage: String
  montantPaye: String
}

type EngagementJuridiqueChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!

  """
  Montant engagé et payé de l'EJ.
  """
  engagementJuridique: EngagementJuridique
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type EngagementJuridiqueChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Entreprise {
  attestationFiscaleAttachment: File
  attestationSocialeAttachment: File

  """
  capital social de l’entreprise. -1 si inconnu.
  """
  capitalSocial: BigInt
  codeEffectifEntreprise: String
  dateCreation: ISO8601Date

  """
  effectif moyen d’une année
  """
  effectifAnnuel: Effectif

  """
  effectif pour un mois donné
  """
  effectifMensuel: Effectif
  enseigne: String
  etatAdministratif: EntrepriseEtatAdministratif
  formeJuridique: String
  formeJuridiqueCode: String
  inlineAdresse: String!
  nom: String
  nomCommercial: String!
  numeroTvaIntracommunautaire: String
  prenom: String
  raisonSociale: String!
  siren: String!
  siretSiegeSocial: String!
}

enum EntrepriseEtatAdministratif {
  """
  L'entreprise est en activité
  """
  Actif

  """
  L'entreprise a cessé son activité
  """
  Ferme
}

type Epci {
  code: String!
  name: String!
}

type EpciChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  departement: Departement
  epci: Epci
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type EpciChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type ExplicationChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")
  collapsibleExplanationEnabled: Boolean
  collapsibleExplanationText: String

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type ExpressionReguliereChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type File {
  byteSize: Int! @deprecated(reason: "Utilisez le champ `byteSizeBigInt` à la place.")
  byteSizeBigInt: BigInt!
  checksum: String!
  contentType: String!

  """
  Date de création du fichier.
  """
  createdAt: ISO8601DateTime!
  filename: String!
  url: URL!
}

input FindDemarcheInput @oneOf {
  """
  ID de la démarche.
  """
  id: ID

  """
  Numero de la démarche.
  """
  number: Int
}

interface GeoArea {
  description: String
  geometry: GeoJSON!
  id: ID!
  source: GeoAreaSource!
}

enum GeoAreaSource {
  """
  Parcelle cadastrale
  """
  cadastre

  """
  Sélection utilisateur
  """
  selection_utilisateur
}

type GeoJSON {
  coordinates: Coordinates!
  type: String!
}

"""
Un groupe instructeur
"""
type GroupeInstructeur {
  """
  L’état du groupe instructeur.
  """
  closed: Boolean!
  id: ID!
  instructeurs: [Profile!]!

  """
  Libellé du groupe instructeur.
  """
  label: String!

  """
  Le numero du groupe instructeur.
  """
  number: Int!
}

"""
Autogenerated input type of GroupeInstructeurAjouterInstructeurs
"""
input GroupeInstructeurAjouterInstructeursInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Groupe instructeur ID.
  """
  groupeInstructeurId: ID!

  """
  Instructeurs à ajouter.
  """
  instructeurs: [ProfileInput!]!
}

"""
Autogenerated return type of GroupeInstructeurAjouterInstructeurs.
"""
type GroupeInstructeurAjouterInstructeursPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
  groupeInstructeur: GroupeInstructeur
  warnings: [WarningMessage!]
}

"""
Attributs pour l’ajout d'un groupe instructeur.
"""
input GroupeInstructeurAttributes {
  """
  L’état du groupe instructeur.
  """
  closed: Boolean = false

  """
  Instructeurs à ajouter.
  """
  instructeurs: [ProfileInput!] = []

  """
  Libelle du groupe instructeur.
  """
  label: String!
}

"""
Autogenerated input type of GroupeInstructeurCreer
"""
input GroupeInstructeurCreerInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Demarche ID ou numéro.
  """
  demarche: FindDemarcheInput!

  """
  Groupes instructeur à ajouter.
  """
  groupeInstructeur: GroupeInstructeurAttributes!
}

"""
Autogenerated return type of GroupeInstructeurCreer.
"""
type GroupeInstructeurCreerPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
  groupeInstructeur: GroupeInstructeur
  warnings: [WarningMessage!]
}

"""
Autogenerated input type of GroupeInstructeurModifier
"""
input GroupeInstructeurModifierInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  L’état du groupe instructeur.
  """
  closed: Boolean

  """
  Groupe instructeur ID.
  """
  groupeInstructeurId: ID!

  """
  Libellé du groupe instructeur.
  """
  label: String
}

"""
Autogenerated return type of GroupeInstructeurModifier.
"""
type GroupeInstructeurModifierPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
  groupeInstructeur: GroupeInstructeur
}

"""
Autogenerated input type of GroupeInstructeurSupprimerInstructeurs
"""
input GroupeInstructeurSupprimerInstructeursInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Groupe instructeur ID.
  """
  groupeInstructeurId: ID!

  """
  Instructeurs à supprimer.
  """
  instructeurs: [ProfileInput!]!
}

"""
Autogenerated return type of GroupeInstructeurSupprimerInstructeurs.
"""
type GroupeInstructeurSupprimerInstructeursPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [ValidationError!]
  groupeInstructeur: GroupeInstructeur
}

"""
Un groupe instructeur avec ses dossiers
"""
type GroupeInstructeurWithDossiers {
  """
  L’état du groupe instructeur.
  """
  closed: Boolean!

  """
  Liste de tous les dossiers supprimés d’un groupe instructeur.
  """
  deletedDossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers supprimés depuis la date.
    """
    deletedSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    L’ordre des dossiers supprimés.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")
  ): DeletedDossierConnection!

  """
  Liste de tous les dossiers d’un groupe instructeur.
  """
  dossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Seulement les dossiers archivés.
    """
    archived: Boolean

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers déposés depuis la date.
    """
    createdSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Seulement les dossiers pour les révisons avant la révision donnée.
    """
    maxRevision: ID

    """
    Seulement les dossiers pour les révisons après la révision donnée.
    """
    minRevision: ID

    """
    L’ordre des dossiers.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")

    """
    Seulement les dossiers pour la révision donnée.
    """
    revision: ID

    """
    Dossiers avec statut.
    """
    state: DossierState

    """
    Dossiers mis à jour depuis la date.
    """
    updatedSince: ISO8601DateTime
  ): DossierConnection!
  id: ID!
  instructeurs: [Profile!]!

  """
  Libellé du groupe instructeur.
  """
  label: String!

  """
  Le numero du groupe instructeur.
  """
  number: Int!

  """
  Liste de tous les dossiers en attente de suppression définitive d’un groupe instructeur.
  """
  pendingDeletedDossiers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Dossiers en attente de suppression depuis la date.
    """
    deletedSince: ISO8601DateTime

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    L’ordre des dossiers en attente de suppression.
    """
    order: Order = ASC @deprecated(reason: "Utilisez l’argument `last` à la place.")
  ): DeletedDossierConnection!
}

type HeaderSectionChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type IbanChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type IntegerNumberChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  value: BigInt
}

type IntegerNumberChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type LinkedDropDownListChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!
  primaryValue: String
  secondaryValue: String

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type LinkedDropDownListChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des options d’un champ avec selection.
  """
  options: [String!]

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type MesriChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Message {
  attachment: File @deprecated(reason: "Utilisez le champ `attachments` à la place.")
  attachments: [File!]!
  body: String!
  correction: Correction
  createdAt: ISO8601DateTime!
  email: String!
  id: ID!
}

type MultipleDropDownListChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  values: [String!]!
}

type MultipleDropDownListChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des options d’un champ avec selection.
  """
  options: [String!]

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Mutation {
  """
  File information required to prepare a direct upload
  """
  createDirectUpload(
    """
    Parameters for CreateDirectUpload
    """
    input: CreateDirectUploadInput!
  ): CreateDirectUploadPayload

  """
  Cloner une démarche.
  """
  demarcheCloner(
    """
    Parameters for DemarcheCloner
    """
    input: DemarcheClonerInput!
  ): DemarcheClonerPayload

  """
  Accepter le dossier.
  """
  dossierAccepter(
    """
    Parameters for DossierAccepter
    """
    input: DossierAccepterInput!
  ): DossierAccepterPayload

  """
  Archiver le dossier.
  """
  dossierArchiver(
    """
    Parameters for DossierArchiver
    """
    input: DossierArchiverInput!
  ): DossierArchiverPayload

  """
  Changer le grope instructeur du dossier.
  """
  dossierChangerGroupeInstructeur(
    """
    Parameters for DossierChangerGroupeInstructeur
    """
    input: DossierChangerGroupeInstructeurInput!
  ): DossierChangerGroupeInstructeurPayload

  """
  Classer le dossier sans suite.
  """
  dossierClasserSansSuite(
    """
    Parameters for DossierClasserSansSuite
    """
    input: DossierClasserSansSuiteInput!
  ): DossierClasserSansSuitePayload

  """
  Envoyer un message à l'usager du dossier.
  """
  dossierEnvoyerMessage(
    """
    Parameters for DossierEnvoyerMessage
    """
    input: DossierEnvoyerMessageInput!
  ): DossierEnvoyerMessagePayload
  dossierModifierAnnotationAjouterLigne(
    """
    Parameters for DossierModifierAnnotationAjouterLigne
    """
    input: DossierModifierAnnotationAjouterLigneInput!
  ): DossierModifierAnnotationAjouterLignePayload

  """
  Modifier l’annotation au format oui/non.
  """
  dossierModifierAnnotationCheckbox(
    """
    Parameters for DossierModifierAnnotationCheckbox
    """
    input: DossierModifierAnnotationCheckboxInput!
  ): DossierModifierAnnotationCheckboxPayload

  """
  Modifier l’annotation au format date.
  """
  dossierModifierAnnotationDate(
    """
    Parameters for DossierModifierAnnotationDate
    """
    input: DossierModifierAnnotationDateInput!
  ): DossierModifierAnnotationDatePayload

  """
  Modifier l’annotation au format date et heure.
  """
  dossierModifierAnnotationDatetime(
    """
    Parameters for DossierModifierAnnotationDatetime
    """
    input: DossierModifierAnnotationDatetimeInput!
  ): DossierModifierAnnotationDatetimePayload

  """
  Modifier l’annotation au format nombre entier.
  """
  dossierModifierAnnotationIntegerNumber(
    """
    Parameters for DossierModifierAnnotationIntegerNumber
    """
    input: DossierModifierAnnotationIntegerNumberInput!
  ): DossierModifierAnnotationIntegerNumberPayload

  """
  Modifier l’annotation au format text.
  """
  dossierModifierAnnotationText(
    """
    Parameters for DossierModifierAnnotationText
    """
    input: DossierModifierAnnotationTextInput!
  ): DossierModifierAnnotationTextPayload

  """
  Passer le dossier en instruction.
  """
  dossierPasserEnInstruction(
    """
    Parameters for DossierPasserEnInstruction
    """
    input: DossierPasserEnInstructionInput!
  ): DossierPasserEnInstructionPayload

  """
  Refuser le dossier.
  """
  dossierRefuser(
    """
    Parameters for DossierRefuser
    """
    input: DossierRefuserInput!
  ): DossierRefuserPayload

  """
  Re-passer le dossier en construction.
  """
  dossierRepasserEnConstruction(
    """
    Parameters for DossierRepasserEnConstruction
    """
    input: DossierRepasserEnConstructionInput!
  ): DossierRepasserEnConstructionPayload

  """
  Re-passer le dossier en instruction.
  """
  dossierRepasserEnInstruction(
    """
    Parameters for DossierRepasserEnInstruction
    """
    input: DossierRepasserEnInstructionInput!
  ): DossierRepasserEnInstructionPayload

  """
  Ajouter des instructeurs à un groupe instructeur.
  """
  groupeInstructeurAjouterInstructeurs(
    """
    Parameters for GroupeInstructeurAjouterInstructeurs
    """
    input: GroupeInstructeurAjouterInstructeursInput!
  ): GroupeInstructeurAjouterInstructeursPayload

  """
  Crée un groupe instructeur.
  """
  groupeInstructeurCreer(
    """
    Parameters for GroupeInstructeurCreer
    """
    input: GroupeInstructeurCreerInput!
  ): GroupeInstructeurCreerPayload

  """
  Modifier un groupe instructeur.
  """
  groupeInstructeurModifier(
    """
    Parameters for GroupeInstructeurModifier
    """
    input: GroupeInstructeurModifierInput!
  ): GroupeInstructeurModifierPayload

  """
  Supprimer des instructeurs d’un groupe instructeur.
  """
  groupeInstructeurSupprimerInstructeurs(
    """
    Parameters for GroupeInstructeurSupprimerInstructeurs
    """
    input: GroupeInstructeurSupprimerInstructeursInput!
  ): GroupeInstructeurSupprimerInstructeursPayload
}

type NumberChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

enum Order {
  """
  L’ordre ascendant.
  """
  ASC

  """
  L’ordre descendant.
  """
  DESC
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type ParcelleCadastrale implements GeoArea {
  codeArr: String! @deprecated(reason: "Utilisez le champ `prefixe` à la place.")
  codeCom: String! @deprecated(reason: "Utilisez le champ `commune` à la place.")
  codeDep: String! @deprecated(reason: "Utilisez le champ `commune` à la place.")
  commune: String!
  description: String
  feuille: Int! @deprecated(reason: "L’information n’est plus disponible.")
  geometry: GeoJSON!
  id: ID!
  nomCom: String! @deprecated(reason: "Utilisez le champ `commune` à la place.")
  numero: String!
  prefixe: String!
  section: String!
  source: GeoAreaSource!
  surface: String!
  surfaceIntersection: Float! @deprecated(reason: "L’information n’est plus disponible.")
  surfaceParcelle: Float! @deprecated(reason: "Utilisez le champ `surface` à la place.")
}

type Pays {
  code: String!
  name: String!
}

type PaysChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  pays: Pays
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type PaysChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des pays.
  """
  options: [Pays!]

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type PersonneMorale implements Demandeur {
  address: Address!
  adresse: String! @deprecated(reason: "Utilisez le champ `address.label` à la place.")
  association: Association
  codeInseeLocalite: String! @deprecated(reason: "Utilisez le champ `address.city_code` à la place.")
  codePostal: String! @deprecated(reason: "Utilisez le champ `address.postal_code` à la place.")
  complementAdresse: String @deprecated(reason: "Utilisez le champ `address` à la place.")
  entreprise: Entreprise
  id: ID!
  libelleNaf: String!
  localite: String! @deprecated(reason: "Utilisez le champ `address.city_name` à la place.")
  naf: String
  nomVoie: String @deprecated(reason: "Utilisez le champ `address.street_name` à la place.")
  numeroVoie: String @deprecated(reason: "Utilisez le champ `address.street_number` à la place.")
  siegeSocial: Boolean!
  siret: String!
  typeVoie: String @deprecated(reason: "Utilisez le champ `address.street_address` à la place.")
}

type PersonneMoraleIncomplete implements Demandeur {
  id: ID!
  siret: String!
}

type PersonnePhysique implements Demandeur {
  civilite: Civilite
  dateDeNaissance: ISO8601Date

  """
  Email du bénéficiaire (dans le cas d'un dossier déposé par et pour l'usager
  connecté, l'email est celui de l'usager connecté. Dans le cas d'un dossier
  déposé pour un bénéficiaire, l'email est celui du bénéficiaire, s'il a été renseigné)
  """
  email: String
  id: ID!
  nom: String!
  prenom: String!
}

type PhoneChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type PieceJustificativeChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  file: File @deprecated(reason: "Utilisez le champ `files` à la place.")
  files: [File!]!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type PieceJustificativeChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String

  """
  Modèle de la pièce justificative.
  """
  fileTemplate: File
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type PoleEmploiChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

"""
Profil d'un usager connecté (déposant un dossier, instruisant un dossier...)
"""
type Profile {
  """
  Email de l'usager
  """
  email: String!
  id: ID!
}

input ProfileInput @oneOf {
  """
  Email
  """
  email: String

  """
  ID
  """
  id: ID
}

type Query {
  """
  Informations concernant une démarche.
  """
  demarche(
    """
    Numéro de la démarche.
    """
    number: Int!
  ): Demarche!
  demarcheDescriptor(
    """
    La démarche.
    """
    demarche: FindDemarcheInput!
  ): DemarcheDescriptor

  """
  Informations sur un dossier d’une démarche.
  """
  dossier(
    """
    Numéro du dossier.
    """
    number: Int!
  ): Dossier!

  """
  Informations sur un groupe instructeur.
  """
  groupeInstructeur(
    """
    Numéro du groupe instructeur.
    """
    number: Int!
  ): GroupeInstructeurWithDossiers!
}

type RNA {
  address: Address
  id: String!
  title: String
}

type RNAChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  commune: Commune
  departement: Departement
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!
  rna: RNA

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type RNAChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type RNF {
  address: Address
  id: String!
  title: String
}

type RNFChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  commune: Commune
  departement: Departement
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!
  rnf: RNF

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type RNFChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Region {
  code: String!
  name: String!
}

type RegionChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!
  region: Region

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type RegionChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  List des regions.
  """
  options: [Region!]

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type RepetitionChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  champs: [Champ!]! @deprecated(reason: "Utilisez le champ `rows` à la place.")
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!
  rows: [Row!]!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type RepetitionChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!]

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type Revision {
  annotationDescriptors: [ChampDescriptor!]!
  champDescriptors: [ChampDescriptor!]!

  """
  Date de la création.
  """
  dateCreation: ISO8601DateTime!

  """
  Date de la publication.
  """
  datePublication: ISO8601DateTime
  id: ID!
}

type Row {
  champs: [Champ!]!
  id: ID!
}

type SelectionUtilisateur implements GeoArea {
  description: String
  geometry: GeoJSON!
  id: ID!
  source: GeoAreaSource!
}

type Service {
  id: ID!

  """
  nom du service qui met en oeuvre la démarche
  """
  nom: String!

  """
  nom de l'organisme qui met en oeuvre la démarche
  """
  organisme: String!

  """
  n° siret du service qui met en oeuvre la démarche
  """
  siret: String

  """
  type d'organisme qui met en oeuvre la démarche
  """
  typeOrganisme: TypeOrganisme!
}

type SiretChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  etablissement: PersonneMorale
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type SiretChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type TextChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
  value: String
}

type TextChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type TextareaChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

type TitreIdentiteChamp implements Champ {
  """
  L'identifiant du champDescriptor de ce champ
  """
  champDescriptorId: String!
  filled: Boolean!
  grantType: TitreIdentiteGrantType!
  id: ID!

  """
  Libellé du champ.
  """
  label: String!
  prefilled: Boolean!

  """
  La valeur du champ sous forme texte.
  """
  stringValue: String

  """
  Date de dernière modification du champ.
  """
  updatedAt: ISO8601DateTime!
}

type TitreIdentiteChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}

enum TitreIdentiteGrantType {
  """
  Françe Connect
  """
  france_connect

  """
  Pièce justificative
  """
  piece_justificative
}

type Traitement {
  dateTraitement: ISO8601DateTime!
  emailAgentTraitant: String
  id: ID!
  motivation: String
  state: DossierState!
}

enum TypeDeChamp {
  """
  Adresse
  """
  address

  """
  Annuaire de l’éducation
  """
  annuaire_education

  """
  Carte
  """
  carte

  """
  Case à cocher seule
  """
  checkbox

  """
  Civilité
  """
  civilite

  """
  Données de la Caisse nationale des allocations familiales
  """
  cnaf

  """
  Accréditation Paris 2024
  """
  cojo

  """
  Communes
  """
  communes

  """
  Date
  """
  date

  """
  Date et Heure
  """
  datetime

  """
  Nombre décimal
  """
  decimal_number

  """
  Départements
  """
  departements

  """
  Données de la Direction générale des Finances publiques
  """
  dgfip

  """
  Lien vers un autre dossier
  """
  dossier_link

  """
  Choix simple
  """
  drop_down_list

  """
  Adresse électronique
  """
  email

  """
  Translation missing: fr.activerecord.attributes.type_de_champ.type_champs.engagement_juridique
  """
  engagement_juridique

  """
  EPCI
  """
  epci

  """
  Explication
  """
  explication

  """
  Expression régulière
  """
  expression_reguliere

  """
  Titre de section
  """
  header_section

  """
  Numéro Iban
  """
  iban

  """
  Nombre entier
  """
  integer_number

  """
  Deux menus déroulants liés
  """
  linked_drop_down_list

  """
  Données du Ministère de l’Enseignement Supérieur, de la Recherche et de l’Innovation
  """
  mesri

  """
  Choix multiple
  """
  multiple_drop_down_list

  """
  Nombre
  """
  number

  """
  Pays
  """
  pays

  """
  Téléphone
  """
  phone

  """
  Pièce justificative
  """
  piece_justificative

  """
  Situation Pôle emploi
  """
  pole_emploi

  """
  Régions
  """
  regions

  """
  Bloc répétable
  """
  repetition

  """
  RNA (Répertoire national des associations)
  """
  rna

  """
  RNF (Répertoire national des fondations)
  """
  rnf

  """
  Numéro Siret
  """
  siret

  """
  Texte court
  """
  text

  """
  Texte long
  """
  textarea

  """
  Titre identité
  """
  titre_identite

  """
  Oui/Non
  """
  yes_no
}

enum TypeOrganisme {
  """
  Administration centrale
  """
  administration_centrale

  """
  Association
  """
  association

  """
  Autre
  """
  autre

  """
  Collectivité territoriale
  """
  collectivite_territoriale

  """
  Établissement d’enseignement
  """
  etablissement_enseignement

  """
  Opérateur d’État
  """
  operateur_d_etat

  """
  Service déconcentré de l’État
  """
  service_deconcentre_de_l_etat
}

"""
A valid URL, transported as a string
"""
scalar URL

"""
Éreur de validation
"""
type ValidationError {
  """
  A description of the error
  """
  message: String!
}

"""
Message d’alerte
"""
type WarningMessage {
  """
  La description de l’alerte
  """
  message: String!
}

type YesNoChampDescriptor implements ChampDescriptor {
  """
  Description des champs d’un bloc répétable.
  """
  champDescriptors: [ChampDescriptor!] @deprecated(reason: "Utilisez le champ `RepetitionChampDescriptor.champ_descriptors` à la place.")

  """
  Description du champ.
  """
  description: String
  id: ID!

  """
  Libellé du champ.
  """
  label: String!

  """
  Est-ce que le champ est obligatoire ?
  """
  required: Boolean!

  """
  Type de la valeur du champ.
  """
  type: TypeDeChamp! @deprecated(reason: "Utilisez le champ `__typename` à la place.")
}
