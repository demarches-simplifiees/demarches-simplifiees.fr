- if @champ.render_as_radios?
  .fr-fieldset__content
    - items.each do |value, option_id|
      .fr-radio-group
        = @form.radio_button :value, option_id, id: @champ.radio_id(option_id), translate: 'no', aria: { labelledby: labelledby_id(@champ.radio_label_id(option_id)) }
        %label.fr-label{ for: @champ.radio_id(option_id), id: @champ.radio_label_id(option_id) }
          = value

    - if !@champ.mandatory?
      .fr-radio-group
        = @form.radio_button :value, '', checked: @champ.value.blank? && !@champ.other?, id: @champ.radio_id(:blank), aria: { labelledby: labelledby_id(@champ.radio_label_id(:blank)) }
        %label.fr-label{ for: @champ.radio_id(:blank), id: @champ.radio_label_id(:blank) }
          Non renseign√©

- elsif @champ.render_as_combobox?
  %react-fragment
    = render ReactComponent.new "ComboBox/SingleComboBox", **react_props
- else
  = @form.select :value,
    items,
    select_options,
    { required: @champ.required?,
    id: @champ.focusable_input_id,
    class: select_class_names,
    aria: { labelledby: labelledby_id, describedby: select_aria_describedby },
    translate: 'no' }

- if @champ.drop_down_other?
  %div{ class: other_element_class_names }
    = render EditableChamp::DropDownOtherInputComponent.new(form: @form, champ: @champ)
