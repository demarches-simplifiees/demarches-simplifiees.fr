- each_champ do |champ|
  - if champ.repetition?
    - champ.rows.each.with_index do |row, i|
      .fr-background-alt--grey.fr-p-2w.fr-my-3w.fr-ml-2w.champ-repetition
        %p.font-weight-bold= "#{champ.libelle} #{i + 1} :"

        = render Dossiers::ChampsRowsShowComponent.new(champs: row, seen_at:, profile:)

  - else
    = render Dossiers::RowShowComponent.new(label: champ.libelle, seen_at:, profile:, content_class: champ.type_champ, updated_at: updated_after_deposer?(champ) ? champ.updated_at : nil) do |c|
      - if champ.blank?
        - c.blank do
          = t(blank_key(champ))
      - else
        - c.with_value do
          - case champ.type_champ
          - when TypeDeChamp.type_champs.fetch(:carte)
            = render partial: "shared/champs/carte/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:dossier_link)
            = render partial: "shared/champs/dossier_link/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:multiple_drop_down_list)
            = render partial: "shared/champs/multiple_drop_down_list/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:piece_justificative), TypeDeChamp.type_champs.fetch(:titre_identite)
            = render partial: "shared/champs/piece_justificative/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:siret)
            = render partial: "shared/champs/siret/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:iban)
            = render partial: "shared/champs/iban/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:textarea)
            = render partial: "shared/champs/textarea/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:annuaire_education)
            = render partial: "shared/champs/annuaire_education/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:cnaf)
            = render partial: "shared/champs/cnaf/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:dgfip)
            = render partial: "shared/champs/dgfip/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:pole_emploi)
            = render partial: "shared/champs/pole_emploi/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:mesri)
            = render partial: "shared/champs/mesri/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:address)
            = render partial: "shared/champs/address/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:communes)
            = render partial: "shared/champs/communes/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:regions)
            = render partial: "shared/champs/regions/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:rna)
            = render partial: "shared/champs/rna/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:epci)
            = render partial: "shared/champs/epci/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:date)
            %p= champ.to_s
          - when TypeDeChamp.type_champs.fetch(:datetime)
            %p= champ.to_s
          - when TypeDeChamp.type_champs.fetch(:number), TypeDeChamp.type_champs.fetch(:integer_number), TypeDeChamp.type_champs.fetch(:decimal_number)
            %p= helpers.number_with_html_delimiter(champ.to_s)
          - else
            = helpers.format_text_value(champ.to_s.strip) # format already wrap in p

