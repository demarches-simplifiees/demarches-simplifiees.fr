- each_champ do |champ|
  - if champ.repetition?
    = render ViewableChamp::RepetitionComponent.new(repetition: champ, demande_seen_at: seen_at, profile:)

  - elsif champ.header_section?
    = render ViewableChamp::HeaderSectionComponent.new(header_section: champ)
  - else
    = render Dossiers::RowShowComponent.new(label: champ.libelle, seen_at:, profile:, content_class: champ.type_champ, updated_at: updated_at_after_deposer(champ)) do |c|
      - if champ.blank?
        - c.with_blank do
          = t(blank_key(champ))
      - else
        - c.with_value do
          - case champ.type_champ
          - when TypeDeChamp.type_champs.fetch(:carte)
            = render partial: "shared/champs/carte/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:dossier_link)
            = render partial: "shared/champs/dossier_link/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:drop_down_list)
            = render partial: "shared/champs/drop_down_list/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:multiple_drop_down_list)
            = render partial: "shared/champs/multiple_drop_down_list/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:piece_justificative), TypeDeChamp.type_champs.fetch(:titre_identite)
            = render partial: "shared/champs/piece_justificative/show", locals: { champ: champ, profile: @profile  }
          - when TypeDeChamp.type_champs.fetch(:siret)
            - etablissement = champ.etablissement
            - if etablissement.present?
              - if etablissement.as_degraded_mode?
                = render Dossiers::DegradedIdentiteEntrepriseComponent.new(etablissement:, profile: @profile)
              - elsif @profile == 'usager'
                = render Dossiers::IdentiteEntrepriseForUsagerComponent.new(etablissement:)
              - else
                = render Dossiers::IdentiteEntrepriseComponent.new(champ:, avis: @avis)
          - when TypeDeChamp.type_champs.fetch(:iban)
            = render partial: "shared/champs/iban/show", locals: { champ: champ }
          - when TypeDeChamp.type_champs.fetch(:annuaire_education)
            = render Dossiers::AnnuaireEducationComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:cnaf)
            = render partial: "shared/champs/cnaf/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:dgfip)
            = render partial: "shared/champs/dgfip/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:pole_emploi)
            = render partial: "shared/champs/pole_emploi/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:mesri)
            = render partial: "shared/champs/mesri/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:address)
            = render Dossiers::AddressComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:communes)
            = render Dossiers::CommuneComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:departements)
            = render Dossiers::DepartementComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:regions)
            = render Dossiers::RegionComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:rna)
            = render Dossiers::RNAComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:rnf)
            = render Dossiers::RNFComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:epci)
            = render Dossiers::EpciComponent.new(champ:)
          - when TypeDeChamp.type_champs.fetch(:cojo)
            = render partial: "shared/champs/cojo/show", locals: { champ: champ, profile: @profile }
          - when TypeDeChamp.type_champs.fetch(:date)
            %p.copy-zone= champ.to_s
          - when TypeDeChamp.type_champs.fetch(:datetime)
            %p.copy-zone= champ.to_s
          - when TypeDeChamp.type_champs.fetch(:number), TypeDeChamp.type_champs.fetch(:integer_number), TypeDeChamp.type_champs.fetch(:decimal_number)
            %p.copy-zone= helpers.number_with_html_delimiter(champ.to_s)
          - when TypeDeChamp.type_champs.fetch(:referentiel)
            = render Dossiers::ReferentielComponent.new(champ:, profile: @profile)

          - else
            .copy-zone{ 'data-to-copy': champ.to_s.strip }
              = helpers.format_text_value(champ.to_s.strip)
