= render Dropdown::MenuComponent.new(wrapper: :span, button_options: { class: ['fr-btn--sm', @class_btn.present? ? @class_btn : 'fr-btn--secondary']}, menu_options: { id: @count.nil? ? "download_menu" : "download_all_menu", class: ['dropdown-export'] }) do |menu|
  - menu.with_menu_header_html do
    %p.menu-component-header.fr-px-2w.fr-pt-2w.fr-mb-0
      %span.fr-icon-info-line{ aria: { hidden: true } }
        Des macros ? Lisez la
        = link_to('doc', t('.macros_doc.url'),
          title: t('.macros_doc.title'),
          **external_link_attributes)

  - menu.with_button_inner_html do
    = @count.nil? ? t(".download_all") : t(".download", count: @count)

  - formats.each do |format|
    - menu.with_item do
      = link_to download_export_path(export_format: format), role: 'menuitem', data: { turbo_method: :post, turbo: true } do
        = t(".everything_#{format}_html")

  - if export_templates.present?
    - export_templates.each do |export_template|
      - menu.with_item do
        = link_to download_export_path(export_template_id: export_template.id), role: 'menuitem', data: { turbo_method: :post, turbo: true } do
          = "Exporter à partir du modèle #{export_template.name}"
  - if feature_enabled?(:export_template)
    - menu.with_item do
      = link_to new_instructeur_export_template_path(procedure_id: params[:procedure_id]), role: 'menuitem' do
        Ajouter un modèle d'export
