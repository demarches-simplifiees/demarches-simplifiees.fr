= render Dropdown::MenuComponent.new(wrapper: :span, button_options: { class: ['fr-btn--sm', @class_btn.present? ? @class_btn : 'fr-btn--secondary']}, menu_options: { id: @count.nil? ? "download_menu" : "download_all_menu", class: ['dropdown-export'] }) do |menu|
  - menu.with_menu_header_html do
    %p.menu-component-header.fr-px-2w.fr-pt-2w.fr-mb-0
      %span.fr-icon-info-line{ aria: { hidden: true } }
        Des macros ? Lisez la
        = link_to('doc', t('.macros_doc.url'),
          title: t('.macros_doc.title'),
          **external_link_attributes)

  - menu.with_button_inner_html do
    = @count.nil? ? t(".download_all") : t(".download", count: @count)
  - exports.each do |item|
    - export = item[:export]

    - if export.nil?
      - menu.with_item do
        = link_to download_export_path(export_format: item[:format]), role: 'menuitem', data: { turbo_method: :post, turbo: true } do
          = t(".everything_#{item[:format]}_html")
    - elsif export.available?
      - menu.with_item do
        %div
          = link_to ready_link_label(export), export.file.url, target: "_blank", rel: "noopener", role: 'menuitem'
          - if export.old?
            = button_to download_export_path(export_format: export.format, force_export: true), refresh_button_options(export).merge(role: 'menuitem') do
              .icon.retry
    - else
      - menu.with_item(aria: {disabled:"true"}, class: 'selected') do
        %span{ data: poll_controller_options(export) }
          = pending_label(export)
