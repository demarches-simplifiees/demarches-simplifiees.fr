%li.type-de-champ.flex.column.justify-start.fr-mb-5v{ html_options }
  .type-de-champ-container
    - if @errors.present?
      .types-de-champ-errors
        = @errors

    .flex.justify-start.section.head
      = form_for(type_de_champ, form_options) do |form|
        .flex.justify-start.flex-gap
          .flex.justify-start.width-33
            .cell.flex.justify-start.column.flex-grow
              = form.label :type_champ, "Type de champ", for: dom_id(type_de_champ, :type_champ)
              = form.select :type_champ, grouped_options_for_select(types_of_type_de_champ, type_de_champ.type_champ), {}, class: 'fr-select small-margin small inline width-100', id: dom_id(type_de_champ, :type_champ), disabled: coordinate.used_by_routing_rules?

          .flex.column.justify-start.flex-grow
            .cell
              .flex.align-center
                = form.label :libelle, "Libellé du champ", class: 'flex-grow', for: dom_id(type_de_champ, :libelle)
                - if can_be_mandatory?
                  .cell.flex.align-center
                    = form.check_box :mandatory, class: 'small-margin small', id: dom_id(type_de_champ, :mandatory)
                    = form.label :mandatory, "Champ obligatoire", for: dom_id(type_de_champ, :mandatory)
              = form.text_field :libelle, class: 'fr-input small-margin small width-100', id: dom_id(type_de_champ, :libelle), data: input_autofocus
            - if type_de_champ.header_section?
              %p
                %small Nous numérotons automatiquement les titres lorsqu’aucun de vos titres ne commence par un chiffre.

            - if type_de_champ.expression_reguliere?
              .cell.fr-mt-1w
                = form.label :expression_reguliere, for: dom_id(type_de_champ, :expression_reguliere) do
                  = t('.expression_reguliere.labels.regex')

                .type-de-champ-expression-reguliere
                  = form.text_field :expression_reguliere, class: "fr-input small-margin small", id: dom_id(type_de_champ, :expression_reguliere)
                %p.fr-hint-text= t('.expression_reguliere.labels.hint')

              .cell.fr-mt-1w
                = form.label :expression_reguliere_exemple_text, for: dom_id(type_de_champ, :expression_reguliere_exemple_text) do
                  = t('.expression_reguliere.labels.valid_exemple')
                = form.text_field :expression_reguliere_exemple_text, class: "fr-input small-margin small", id: dom_id(type_de_champ, :expression_reguliere_exemple_text)
                - if type_de_champ.invalid_regexp?
                  %p.fr-message.fr-message--error
                    = type_de_champ.errors[:expression_reguliere_exemple_text].join(", ")
              .cell.fr-mt-1w
                = form.label :expression_reguliere_error_message, for: dom_id(type_de_champ, :expression_reguliere_error_message) do
                  = t('.expression_reguliere.labels.error_message')
                = form.text_field :expression_reguliere_error_message, class: "fr-input small-margin small", id: dom_id(type_de_champ, :expression_reguliere_error_message)
            - if !type_de_champ.header_section? && !type_de_champ.titre_identite?
              .cell.fr-mt-1w
                = form.label :description, "Description du champ (optionnel)", for: dom_id(type_de_champ, :description)
                = form.text_area :description, class: 'fr-input small-margin small width-100 resize-y', rows: 3, id: dom_id(type_de_champ, :description)
            - if type_de_champ.header_section?
              .cell.fr-mt-1w
                = render TypesDeChampEditor::HeaderSectionComponent.new(form: form, tdc: type_de_champ, upper_tdcs: @upper_coordinates.map(&:type_de_champ))
            - if type_de_champ.explication?
              .cell.fr-mt-1w
                = form.label :collapsible_explanation_enabled, for: dom_id(type_de_champ, :collapsible_explanation_enabled) do
                  Afficher un texte complementaire affichable au clic
                = form.check_box :collapsible_explanation_enabled, class: "small-margin small", id: dom_id(type_de_champ, :collapsible_explanation_enabled)
                - if form.object.collapsible_explanation_enabled?
                  = form.label :collapsible_explanation_text, for: dom_id(type_de_champ, :collapsible_explanation_text) do
                    = "Texte à afficher quand l'utiliser a choisi de l'afficher"
                  = form.text_area :collapsible_explanation_text, class: "fr-input small-margin small", id: dom_id(type_de_champ, :collapsible_explanation_text)
              .cell.fr-mt-1w
                = form.label :notice_explicative, "Notice explicative", for: dom_id(type_de_champ, :notice_explicative)
                = render Attachment::EditComponent.new(**notice_explicative_options)



        .flex.justify-start.fr-mt-1w
          -# ----- Polynesia options
          - if type_de_champ.integer_number? || type_de_champ.decimal_number?
            .flex.width-33
            .flex.column
              .cell
                %label bornes
              .flex.flex-grow.align-center
                .cell
                  = form.label :min, 'Minimum', for: dom_id(type_de_champ, :min)
                .cell
                  = form.number_field :min, class: 'fr-input small-margin small', id: dom_id(type_de_champ, :min)
                .cell
                  = form.label :max, 'Maximum', for: dom_id(type_de_champ, :max)
                .cell
                  = form.number_field :max, class: 'fr-input small-margin small', id: dom_id(type_de_champ, :max)
          - if type_de_champ.date?
            .flex.width-33
            .flex.column
              .cell
                %label bornes
              .flex.flex-grow.align-center
                .cell
                  = form.label :min, 'Début', for: dom_id(type_de_champ, :min)
                .cell
                  = form.date_field :min, class: 'fr-input small-margin small', id: dom_id(type_de_champ, :min), value: type_de_champ.min
                .cell
                  = form.label :max, 'Fin', for: dom_id(type_de_champ, :max)
                .cell
                  = form.date_field :max, class: 'fr-input small-margin small', id: dom_id(type_de_champ, :max), value: type_de_champ.max
          - if type_de_champ.visa?
            .flex.width-33
            .flex.flex-grow.align-center
              .cell.width-100
                = form.label :accredited_user_string, "Mails des personnes accréditées", for: dom_id(type_de_champ, :accredited_user_string)
                = form.text_area :accredited_user_string, class: 'fr-input small-margin small', rows: 7, id: dom_id(type_de_champ, :accredited_user_string), placeholder: 'Ecrire un email par ligne'
          - if type_de_champ.table_row_selector?
            .flex.width-33
            .flex.flex-grow.align-center
              .cell.width-100
                = form.label :table_id, "Table de recherche", for: dom_id(type_de_champ, :table_id)
                = form.select :table_id, type_de_champ.available_tables, {}, id: dom_id(type_de_champ, :table_id), prompt: 'Sélectionnez la table'

          -# DS options
          - if type_de_champ.drop_down_list?
            .flex.width-33
            .flex.column.width-33
              .cell
                = form.label :drop_down_list_value, "Options de la liste", for: dom_id(type_de_champ, :drop_down_list_value)
                = form.text_area :drop_down_list_value, class: 'fr-input small-margin small width-100', rows: 7, id: dom_id(type_de_champ, :drop_down_list_value)
            - if type_de_champ.simple_drop_down_list?
              .flex.column.width-33
                .cell
                  = form.label :drop_down_other, for: dom_id(type_de_champ, :drop_down_other) do
                    Proposer une option « autre » avec un texte libre
                  = form.check_box :drop_down_other, class: "small-margin small", id: dom_id(type_de_champ, :drop_down_other)

          - if type_de_champ.linked_drop_down_list?
            .flex.column.justify-start.flex-grow
              .cell
                = form.label :drop_down_secondary_libelle, "Libellé du champ secondaire", class: 'flex-grow', for: dom_id(type_de_champ, :drop_down_secondary_libelle)
                = form.text_field :drop_down_secondary_libelle, class: 'fr-input small-margin small width-100', id: dom_id(type_de_champ, :drop_down_secondary_libelle)
              .cell.fr-mt-1w
                = form.label :drop_down_secondary_description, "Description du champ secondaire (optionnel)", for: dom_id(type_de_champ, :drop_down_secondary_description)
                = form.text_area :drop_down_secondary_description, class: 'fr-input small-margin small width-100', rows: 3, id: dom_id(type_de_champ, :drop_down_secondary_description)
          - if type_de_champ.piece_justificative?
            .cell
              = form.label :piece_justificative_template, "Modèle", for: dom_id(type_de_champ, :piece_justificative_template)
              = render Attachment::EditComponent.new(**piece_justificative_template_options)

              - if type_de_champ.titre_identite?
                = render Dsfr::AlertComponent.new(state: :info, heading_level: 'p') do |c|
                  - c.with_body do
                    Dans le cadre de la RGPD, le titre d’identité sera supprimé lors de l’acceptation, du refus ou du classement sans suite du dossier.<br />
                    Aussi, pour des raisons de sécurité, un filigrane est automatiquement ajouté aux images.<br />
                    Finalement, le titre d’identité ne sera ni disponible dans les zip de dossiers, ni téléchargeable par API.
              - elsif procedure.piece_justificative_multiple?
                %p Les usagers pourront envoyer plusieurs fichiers si nécessaire.
          - if type_de_champ.carte? || type_de_champ.te_fenua?
            .flex.width-33
            .flex.flex-grow.align-center.fr-m-3v
              - type_de_champ.editable_options.each do |slice|
                .cell
                  .carte-options
                    = form.fields_for :editable_options do |form|
                      - slice.each do |(name, checked)|
                        = form.label name, for: dom_id(type_de_champ, "layer_#{name}") do
                          = form.check_box name, checked: checked, class: 'small-margin small', id: dom_id(type_de_champ, "layer_#{name}")
                          = t(".layers.#{name}")
          - if type_de_champ.textarea?
            .cell
              = form.label :character_limit, for: dom_id(type_de_champ, :character_limit) do
                Spécifier un nombre maximal conseillé de caractères :
              = form.select :character_limit, options_for_character_limit, {}, { id: dom_id(type_de_champ, :character_limit), class: 'fr-select' }

    - if type_de_champ.block?
      .flex.justify-start.section.fr-ml-1w
        .editor-block.flex-grow.cell
          = render TypesDeChampEditor::BlockComponent.new(block: coordinate, coordinates: coordinate.revision_types_de_champ, upper_coordinates: @upper_coordinates)
          .type-de-champ-add-button{ id: dom_id(coordinate, :type_de_champ_add_button), class: class_names(hidden: !coordinate.empty?) }
            = render TypesDeChampEditor::AddChampButtonComponent.new(revision: coordinate.revision, parent: coordinate, is_annotation: coordinate.private?)

    = render(Conditions::ChampsConditionsComponent.new(tdc: type_de_champ, upper_tdcs: @upper_coordinates.map(&:type_de_champ), procedure_id: procedure.id))

    .flex.justify-between.section.footer
      .position.flex.align-center= (@coordinate.position + 1).to_s
      %button.fr-btn.fr-btn--tertiary-no-outline.fr-icon-arrow-up-line.move-up{ move_button_options(:up) }
      %button.fr-btn.fr-btn--tertiary-no-outline.fr-icon-arrow-down-line.move-down{ move_button_options(:down) }
      = render TypesDeChampEditor::SelectChampPositionComponent.new(revision:, coordinate:)

      .flex.right
        - if coordinate.used_by_routing_rules?
          %span
            utilisé pour
            = link_to('le routage', admin_procedure_groupe_instructeurs_path(revision.procedure_id, anchor: 'routing-rules'))
        - else
          = button_to type_de_champ_path, class: 'fr-btn fr-btn--tertiary-no-outline fr-icon-delete-line', title: "Supprimer le champ", method: :delete, form: { data: { turbo_confirm: 'Êtes vous sûr de vouloir supprimer ce champ ?' } } do
            %span.sr-only Supprimer

  .type-de-champ-add-button{ class: class_names(root: !coordinate.child?, flex: true) }
    = render TypesDeChampEditor::AddChampButtonComponent.new(revision: coordinate.revision, parent: coordinate&.parent, is_annotation: coordinate.private?, after_stable_id: type_de_champ.stable_id)
