%li.type-de-champ.flex.column.justify-start{ **li_options }
  .flex.justify-start.section.head{ class: type_de_champ.header_section? ? '' : 'hr'}
    .handle.small.icon-only.icon.move-handle{ title: "Déplacer le champ vers le haut ou vers le bas" }
    .flex.justify-start.delete
      = button_to type_de_champ_path, class: 'button small icon-only danger', method: :delete do
        .icon.delete
  .flex.justify-start.section.hr
    .cell.flex.column.justify-start.w-33
      = form_for(type_de_champ, **form_options(class_name: 'cell w-full')) do |form|
        = form.label :type_champ, "Choisir le type de champ"
        = form.select :type_champ, types_of_type_de_champ, {}, class: 'small-margin small inline w-full', data: { should_update: 'true' }
    = form_for(type_de_champ, **form_options(class_name: 'flex column justify-start flex-grow')) do |form|
      .cell
        .flex.align-center
          = form.label :libelle, "Saisir le libellé", class: 'flex-grow'
          - if can_be_mandatory?
            .cell.flex.align-center
              = form.check_box :mandatory, class: 'small-margin small'
              = form.label :mandatory, "Champ obligatoire"
        = form.text_field :libelle, class: 'small-margin small w-full'
      - if !type_de_champ.header_section? && !type_de_champ.titre_identite?
        .cell.mt-1
          = form.label :description, "Description"
          = form.text_area :description, class: 'small-margin small w-full', rows: 3
  .flex.justify-start.section{ class: type_de_champ.piece_justificative? || type_de_champ.repetition? || type_de_champ.drop_down_list? ? 'hr' : '' }
    = form_for(type_de_champ, **form_options(class_name: 'flex align-center w-full')) do |form|
      .cell.w-33
      .flex.flex-grow.align-center
        .cell.flex.align-center
          = form.label :contextual_help, "Aide contextuelle"
          = form.check_box :contextual_help, class: 'small-margin small'
        .cell.flex.align-center{ id: dom_id(type_de_champ.stable_self, :types_de_champ_editor_conditional_logic_switch), class: type_de_champ.can_have_conditional_logic? ? '' : 'hidden' }
          = form.label :conditional_logic, "Logique conditionelle"
          = form.check_box :conditional_logic, class: 'small-margin small', data: { should_update: 'true' }
  .flex.justify-start
    = render TypesDeChampEditor::ContextualHelpComponent.new(type_de_champ: type_de_champ)
    = render TypesDeChampEditor::ConditionalLogicComponent.new(type_de_champ: type_de_champ)

  .flex.justify-start.section.shift-left
    - if type_de_champ.drop_down_list?
      = form_for(type_de_champ, **form_options(class_name: 'cell mt-1 w-33')) do |form|
        = form.label :drop_down_list_value, "Options de la liste"
        = form.text_area :drop_down_list_value, class: 'small-margin small w-full', rows: 3
    - if type_de_champ.repetition?
      .repetition.flex-grow.cell
        = render TypesDeChampEditor::BlockComponent.new(id: dom_id(type_de_champ.stable_self, :types_de_champ_editor_block), types_de_champ: type_de_champ.types_de_champ)
        = render TypesDeChampEditor::AddChampButtonComponent.new(procedure: procedure, type_de_champ: type_de_champ)
