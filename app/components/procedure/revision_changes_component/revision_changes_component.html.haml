= render Dsfr::ListComponent.new do |list|
  - list.with_empty do
    = t('.no_changes')

  - @tdc_changes.each do |change|
    - prefix = change.private? ? 'private' : 'public'
    - case change.op
    - when :add
      - list.with_item do
        - if change.mandatory?
          = t('.public.add_mandatory', label: change.label)
        - else
          = t(".#{prefix}.add", label: change.label)
    - when :remove
      - list.with_item do
        = t(".#{prefix}.remove", label: change.label)
    - when :update
      - case change.attribute
      - when :libelle
        - list.with_item do
          = t(".#{prefix}.update_libelle", label: change.label, to: change.to)
      - when :type_champ
        - list.with_item do
          = t(".#{prefix}.update_type_champ", label: change.label, to: t("activerecord.attributes.type_de_champ.type_champs.#{change.to}"))
      - when :description
        - list.with_item do
          - if change.to.blank?
            = t(".#{prefix}.remove_description", label: change.label, to: change.to)
          - else
            = t(".#{prefix}.update_description", label: change.label, to: change.to)
      - when :drop_down_secondary_libelle
        - list.with_item do
          = t(".#{prefix}.update_drop_down_secondary_libelle", label: change.label, to: change.to)
      - when :drop_down_secondary_description
        - list.with_item do
          = t(".#{prefix}.update_drop_down_secondary_description", label: change.label, to: change.to)
      - when :mandatory
        - if change.from == false
          - list.with_item do
            = t(".public.enable_mandatory", label: change.label)
        - else
          - list.with_item do
            = t(".public.disable_mandatory", label: change.label)
      - when :piece_justificative_template
        - list.with_item do
          = t(".#{prefix}.update_piece_justificative_template", label: change.label)
      - when :nature
        - list.with_item do
          = t(".#{prefix}.update_nature", label: change.label, to: t("activerecord.attributes.type_de_champ.natures.#{change.to}", default: change.to))
      - when :pj_limit_formats
        - list.with_item do
          = t(".#{prefix}.update_pj_limit_formats", label: change.label)
      - when :pj_format_families
        - list.with_item do
          = t(".#{prefix}.update_pj_format_families", label: change.label)
      - when :pj_auto_purge
        - list.with_item do
          = t(".#{prefix}.update_pj_auto_purge", label: change.label)
      - when :notice_explicative
        - list.with_item do
          = t(".#{prefix}.update_notice_explicative", label: change.label)
      - when :drop_down_options
        - added = change.to.sort - change.from.sort
        - removed = change.from.sort - change.to.sort
        - list.with_item do
          = t(".#{prefix}.update_drop_down_options", label: change.label)
          = render Dsfr::ListComponent.new do |list|
            - if added.present?
              - list.with_item do
                = t('.add_option', items: added.map{ |term| term.is_a?(Array) ? "« #{term.first.strip} »" : "« #{term.strip} »" }.join(", "))
            - if removed.present?
              - list.with_item do
                = t('.remove_option', items: removed.map{ |term| "« #{term.strip} »" }.join(", "))
          - if (removed.present? || added.present? ) && used_by_routing_rules?(change.type_de_champ)
            .fr-alert.fr-alert--warning.fr-mt-1v
              = t(".#{prefix}.update_drop_down_options_alert", label: change.label)
      - when :referentiel
        - list.with_item do
          = t(".#{prefix}.update_referentiel", label: change.label)
      - when :drop_down_mode
        - list.with_item do
          = t(".#{prefix}.update_drop_down_mode", label: change.label)
      - when :drop_down_other
        - if change.from == false
          - list.with_item do
            = t(".#{prefix}.enable_drop_down_other", label: change.label)
        - else
          - list.with_item do
            = t(".#{prefix}.disable_drop_down_other", label: change.label)
      - when :carte_layers
        - added = change.to.sort - change.from.sort
        - removed = change.from.sort - change.to.sort
        - list.with_item do
          = t(".#{prefix}.update_carte_layers", label: change.label)
          = render Dsfr::ListComponent.new do |list|
            - if added.present?
              - list.with_item do
                = t('.add_option', items: added.map{ |term| "« #{t(term, scope: [:administrateurs, :carte_layers])} »" }.join(", "))
            - if removed.present?
              - list.with_item do
                = t('.remove_option', items: removed.map{ |term| "« #{t(term, scope: [:administrateurs, :carte_layers])} »" }.join(", "))
      - when :collapsible_explanation_enabled
        - if change.to
          - list.with_item do
            = t(".#{prefix}.enable_collapsible_explanation", label: change.label)
        - else
          - list.with_item do
            = t(".#{prefix}.remove_collapsible_explanation_text", label: change.label)
      - when :collapsible_explanation_text
        - list.with_item do
          - if change.to.blank?
            = t(".#{prefix}.remove_collapsible_explanation_text", label: change.label, to: change.to)
          - else
            = t(".#{prefix}.update_collapsible_explanation_text", label: change.label, to: change.to)
      - when :condition
        - if change.from.nil?
          - list.with_item do
            = t(".#{prefix}.add_condition", label: change.label, to: change.to)
        - elsif change.to.nil?
          - list.with_item do
            = t(".#{prefix}.remove_condition", label: change.label)
        - else
          - list.with_item do
            = t(".#{prefix}.update_condition", label: change.label, to: change.to)
      - when :positive_number
        - list.with_item do
          = t(".#{prefix}.update_positive_number", label: change.label, to: change.to == '0' ? t(".#{prefix}.remove_positive_constraint") : t(".#{prefix}.add_positive_constraint"))
      - when :range_number
        - list.with_item do
          = t(".#{prefix}.update_range_number", label: change.label, to: change.to == '0' ? t(".#{prefix}.remove_range_number_constraint") : t(".#{prefix}.add_range_number_constraint"))
      - when :min_number
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_min_number", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_min_number", label: change.label, to: change.to)
      - when :max_number
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_max_number", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_max_number", label: change.label, to: change.to)
      - when :date_in_past
        - list.with_item do
          = t(".#{prefix}.update_date_in_past", label: change.label, to: change.to == '0' ? t(".#{prefix}.remove_date_in_past_constraint") : t(".#{prefix}.add_date_in_past_constraint"))
      - when :range_date
        - list.with_item do
          = t(".#{prefix}.update_range_date", label: change.label, to: change.to == '0' ? t(".#{prefix}.remove_range_date_constraint") : t(".#{prefix}.add_range_date_constraint"))
      - when :start_date
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_start_date", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_start_date", label: change.label, to: change.to)
      - when :end_date
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_end_date", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_end_date", label: change.label, to: change.to)
      - when :character_limit
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_character_limit", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_character_limit", label: change.label, to: change.to)
      - when :expression_reguliere
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_expression_reguliere", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_expression_reguliere", label: change.label, to: change.to)
      - when :expression_reguliere_indications
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_expression_reguliere_indications", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_expression_reguliere_indications", label: change.label, to: change.to)
      - when :expression_reguliere_exemple_text
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_expression_reguliere_exemple_text", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_expression_reguliere_exemple_text", label: change.label, to: change.to)
      - when :expression_reguliere_error_message
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_expression_reguliere_error_message", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_expression_reguliere_error_message", label: change.label, to: change.to)
      - when :formatted_mode
        - list.with_item do
          = t(".#{prefix}.update_formatted_mode", label: change.label, to: change.to)
      - when :letters_accepted
        - list.with_item do
          = t(".#{prefix}.update_letters_acceptance", label: change.label, to: change.to == '0' ? t('utils.forbidden_f') : t('utils.accepted_f'))
      - when :numbers_accepted
        - list.with_item do
          = t(".#{prefix}.update_numbers_acceptance", label: change.label, to: change.to == '0' ? t('utils.forbidden') : t('utils.accepted'))
      - when :special_characters_accepted
        - list.with_item do
          = t(".#{prefix}.update_special_characters_acceptance", label: change.label, to: change.to == '0' ? t('utils.forbidden') : t('utils.accepted'))
      - when :min_character_length
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_min_character_length", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_min_character_length", label: change.label, to: change.to)
      - when :max_character_length
        - if change.to.blank?
          - list.with_item do
            = t(".#{prefix}.remove_max_character_length", label: change.label, to: change.to)
        - else
          - list.with_item do
            = t(".#{prefix}.update_max_character_length", label: change.label, to: change.to)
      - when :referentiel_url, :referentiel_mode, :referentiel_hint, :referentiel_test_data, :referentiel_mapping
        - list.with_item do
          = t(".update_referentiel.#{change.attribute}", label: change.label, to: change.to)
  - if @public_move_changes.present?
    - list.with_item do
      = t(".public.move", count: @public_move_changes.size)
  - if @private_move_changes.present?
    - list.with_item do
      = t(".private.move", count: @private_move_changes.size)
  - if @previous_revision.procedure.routing_enabled? && @previous_revision.procedure.groupe_instructeurs.any?(&:invalid_rule?)
    - list.with_item do
      .fr-alert.fr-alert--warning.fr-mt-1v
        = t(".invalid_routing_rules_alert")

  - @ineligibilite_rules_changes.each do |change|
    - list.with_item do
      = t(".ineligibilite_rules.#{change.op}", **change.i18n_params)
