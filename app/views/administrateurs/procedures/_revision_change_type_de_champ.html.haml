- postfix = change[:private] ? '_private' : ''
- case change[:op]
- when :add
  - list.with_item do
    = t("add#{postfix}", label: change[:label], scope: [:administrateurs, :revision_changes])
- when :remove
  - list.with_item do
    = t("remove#{postfix}", label: change[:label], scope: [:administrateurs, :revision_changes])
- when :update
  - case change[:attribute]
  - when :libelle
    - list.with_item do
      = t("update_libelle#{postfix}", label: change[:label], to: change[:to], scope: [:administrateurs, :revision_changes])
  - when :type_champ
    - list.with_item do
      = t("update_type_champ#{postfix}", label: change[:label], to: t("activerecord.attributes.type_de_champ.type_champs.#{change[:to]}"), scope: [:administrateurs, :revision_changes])
  - when :description
    - list.with_item do
      = t("update_description#{postfix}", label: change[:label], to: change[:to], scope: [:administrateurs, :revision_changes])
  - when :drop_down_secondary_libelle
    - list.with_item do
      = t("update_drop_down_secondary_libelle#{postfix}", label: change[:label], to: change[:to], scope: [:administrateurs, :revision_changes])
  - when :drop_down_secondary_description
    - list.with_item do
      = t("update_drop_down_secondary_description#{postfix}", label: change[:label], to: change[:to], scope: [:administrateurs, :revision_changes])
  - when :mandatory
    - if change[:from] == false
      -# i18n-tasks-use t('administrateurs.revision_changes.update_mandatory.enabled')
      -# i18n-tasks-use t('administrateurs.revision_changes.update_mandatory_private.enabled')
      - list.with_item do
        = t("administrateurs.revision_changes.update_mandatory#{postfix}.enabled", label: change[:label])
    - else
      -# i18n-tasks-use t('administrateurs.revision_changes.update_mandatory.disabled')
      -# i18n-tasks-use t('administrateurs.revision_changes.update_mandatory_private.disabled')
      - list.with_item do
        = t("administrateurs.revision_changes.update_mandatory#{postfix}.disabled", label: change[:label])
  - when :piece_justificative_template
    -# i18n-tasks-use t('administrateurs.revision_changes.update_piece_justificative_template')
    -# i18n-tasks-use t('administrateurs.revision_changes.update_piece_justificative_template_private')
    - list.with_item do
      = t("administrateurs.revision_changes.update_piece_justificative_template#{postfix}", label: change[:label])
  - when :drop_down_options
    - added = change[:to].sort - change[:from].sort
    - removed = change[:from].sort - change[:to].sort
    - list.with_item do
      = t("update_drop_down_options#{postfix}", scope: [:administrateurs, :revision_changes], label: change[:label])
      = render Dsfr::ListComponent.new do |list|
        - if added.present?
          - list.with_item do
            = t(:add_option, scope: [:administrateurs, :revision_changes], items: added.map{ |term| "« #{term.strip} »" }.join(", "))
        - if removed.present?
          - list.with_item do
            = t(:remove_option, scope: [:administrateurs, :revision_changes], items: removed.map{ |term| "« #{term.strip} »" }.join(", "))
  - when :drop_down_other
    - if change[:from] == false
      - list.with_item do
        = t("administrateurs.revision_changes.update_drop_down_other#{postfix}.enabled", label: change[:label])
    - else
      - list.with_item do
        = t("administrateurs.revision_changes.update_drop_down_other#{postfix}.disabled", label: change[:label])
  - when :carte_layers
    - added = change[:to].sort - change[:from].sort
    - removed = change[:from].sort - change[:to].sort
    - list.with_item do
      = t("update_carte_layers#{postfix}", scope: [:administrateurs, :revision_changes], label: change[:label])
      = render Dsfr::ListComponent.new do |list|
        - if added.present?
          - list.with_item do
            = t(:add_option, scope: [:administrateurs, :revision_changes], items: added.map{ |term| "« #{t(term, scope: [:administrateurs, :carte_layers])} »" }.join(", "))
        - if removed.present?
          - list.with_item do
            = t(:remove_option, scope: [:administrateurs, :revision_changes], items: removed.map{ |term| "« #{t(term, scope: [:administrateurs, :carte_layers])} »" }.join(", "))
  - when :collapsible_explanation_enabled
    - if change[:to]
      - list.with_item do
        = t("administrateurs.revision_changes.update_collapsible_explanation_enabled#{postfix}.enabled", label: change[:label])
    - else
      - list.with_item do
        = t("administrateurs.revision_changes.update_collapsible_explanation_enabled#{postfix}.disabled", label: change[:label])
  - when :collapsible_explanation_text
    - list.with_item do
      = t("administrateurs.revision_changes.update_collapsible_explanation_text#{postfix}", label: change[:label], text: change[:to])

  - when :condition
    - if change[:from].nil?
      - list.with_item do
        = t(:add_condition, scope: [:administrateurs, :revision_changes], label: change[:label], to: change[:to])
    - elsif change[:to].nil?
      - list.with_item do
        = t(:remove_condition, scope: [:administrateurs, :revision_changes], label: change[:label])
    - else
      - list.with_item do
        = t(:update_condition, scope: [:administrateurs, :revision_changes], label: change[:label], to: change[:to])
